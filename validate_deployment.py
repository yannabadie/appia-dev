#!/usr/bin/env python3
"""
Script de v√©rification finale pour le d√©ploiement JARVYS Dashboard
V√©rifie que tous les composants sont pr√™ts pour le d√©ploiement sur Supabase
"""

import json
import os
from pathlib import Path
from typing import Any, Dict, List


class DeploymentValidator:
    def __init__(self):
        self.checks = []
        self.errors = []
        self.warnings = []

    def add_check(
        self, name: str, status: bool, message: str, is_critical: bool = True
    ):
        """Ajoute un r√©sultat de v√©rification."""
        self.checks.append(
            {
                "name": name,
                "status": status,
                "message": message,
                "critical": is_critical,
            }
        )

        if not status:
            if is_critical:
                self.errors.append(f"{name}: {message}")
            else:
                self.warnings.append(f"{name}: {message}")

    def check_file_exists(
        self, file_path: str, description: str, critical: bool = True
    ):
        """V√©rifie l'existence d'un fichier."""
        path = Path(file_path)
        exists = path.exists()
        self.add_check(
            f"Fichier {description}",
            exists,
            f"{'Trouv√©' if exists else 'Manquant'}: {file_path}",
            critical,
        )
        return exists

    def check_edge_function(self):
        """V√©rifie la fonction Edge Supabase."""
        index_path = "supabase/functions/jarvys-dashboard/index.ts"
        if not self.check_file_exists(index_path, "Edge Function"):
            return False

        # V√©rifier le contenu
        with open(index_path, "r") as f:
            content = f.read()

        # V√©rifications du contenu
        checks = [
            ("Secret SPB_EDGE_FUNCTIONS", "SPB_EDGE_FUNCTIONS" in content),
            ("Valeur du secret", "dHx8o@3?G4!QT86C" in content),
            ("Fonction serve", "serve(" in content),
            ("Endpoints API", "/api/" in content),
            ("CORS headers", "Access-Control-Allow-Origin" in content),
        ]

        for check_name, condition in checks:
            self.add_check(
                f"Edge Function - {check_name}",
                condition,
                "Configur√©" if condition else "Manquant",
                True,
            )

        return all(condition for _, condition in checks)

    def check_github_workflow(self):
        """V√©rifie le workflow GitHub Actions."""
        workflow_path = ".github/workflows/deploy-dashboard.yml"
        if not self.check_file_exists(workflow_path, "GitHub Workflow"):
            return False

        with open(workflow_path, "r") as f:
            content = f.read()

        checks = [
            ("Trigger on main", "branches: [ main ]" in content),
            ("Supabase CLI install", "supabase@latest" in content),
            ("Secret configuration", "SPB_EDGE_FUNCTIONS" in content),
            ("Health check test", "curl -f" in content),
            ("Deploy command", "functions deploy" in content),
        ]

        for check_name, condition in checks:
            self.add_check(
                f"GitHub Workflow - {check_name}",
                condition,
                "Configur√©" if condition else "Manquant",
                True,
            )

        return all(condition for _, condition in checks)

    def check_deploy_script(self):
        """V√©rifie le script de d√©ploiement."""
        script_path = "deploy-supabase.sh"
        if not self.check_file_exists(script_path, "Script de d√©ploiement"):
            return False

        # V√©rifier les permissions d'ex√©cution
        path = Path(script_path)
        executable = os.access(path, os.X_OK)
        self.add_check(
            "Script ex√©cutable",
            executable,
            f"{'Ex√©cutable' if executable else 'Permissions manquantes'}",
            False,
        )

        with open(script_path, "r") as f:
            content = f.read()

        checks = [
            ("Shebang bash", content.startswith("#!/bin/bash")),
            ("V√©rification Supabase CLI", "supabase" in content),
            ("D√©ploiement function", "functions deploy" in content),
            ("Configuration secret", "secrets set" in content),
        ]

        for check_name, condition in checks:
            self.add_check(
                f"Deploy Script - {check_name}",
                condition,
                "Configur√©" if condition else "Manquant",
                False,
            )

        return True

    def check_supabase_config(self):
        """V√©rifie la configuration Supabase."""
        config_path = "supabase/config.toml"
        if not self.check_file_exists(config_path, "Configuration Supabase"):
            return False

        with open(config_path, "r") as f:
            content = f.read()

        # V√©rifications basiques
        has_project_id = "project_id" in content
        self.add_check(
            "Configuration Supabase - Project ID",
            has_project_id,
            "Configur√©" if has_project_id else "Manquant",
            True,
        )

        return has_project_id

    def check_documentation(self):
        """V√©rifie la documentation."""
        docs = [
            ("DASHBOARD_CLOUD.md", "Documentation cloud"),
            ("DEPLOY_QUICK_START.md", "Guide de d√©ploiement rapide"),
            ("README.md", "Documentation principale"),
        ]

        for doc_path, description in docs:
            self.check_file_exists(doc_path, description, False)

    def check_environment_requirements(self):
        """V√©rifie les pr√©requis d'environnement."""
        # Ces v√©rifications sont informatives
        env_vars = [
            "SUPABASE_ACCESS_TOKEN",
            "SUPABASE_PROJECT_ID",
            "SPB_EDGE_FUNCTIONS",
        ]

        for var in env_vars:
            value = os.getenv(var)
            self.add_check(
                f"Variable d'environnement {var}",
                value is not None,
                f"{'D√©finie' if value else 'Non d√©finie (configurez dans GitHub/Supabase)'}",
                False,
            )

    def run_all_checks(self):
        """Ex√©cute toutes les v√©rifications."""
        print("üîç V√©rification de la configuration JARVYS Dashboard")
        print("=" * 60)

        # Ex√©cution des v√©rifications
        self.check_edge_function()
        self.check_github_workflow()
        self.check_deploy_script()
        self.check_supabase_config()
        self.check_documentation()
        self.check_environment_requirements()

        # Affichage des r√©sultats
        self.print_results()

    def print_results(self):
        """Affiche les r√©sultats des v√©rifications."""
        print("\nüìä R√©sultats des V√©rifications")
        print("-" * 40)

        # Grouper par statut
        passed = [c for c in self.checks if c["status"]]
        failed = [c for c in self.checks if not c["status"]]
        critical_failed = [c for c in failed if c["critical"]]

        # Affichage des v√©rifications r√©ussies
        for check in passed:
            print(f"‚úÖ {check['name']}: {check['message']}")

        # Affichage des √©checs
        for check in failed:
            icon = "‚ùå" if check["critical"] else "‚ö†Ô∏è"
            print(f"{icon} {check['name']}: {check['message']}")

        # R√©sum√©
        print(f"\nüìà R√©sum√©: {len(passed)}/{len(self.checks)} v√©rifications r√©ussies")

        if critical_failed:
            print(f"\n‚ùå {len(critical_failed)} erreur(s) critique(s) d√©tect√©e(s):")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
            print("\nüõ†Ô∏è Corrigez ces erreurs avant le d√©ploiement!")
            return False

        if self.warnings:
            print(f"\n‚ö†Ô∏è {len(self.warnings)} avertissement(s):")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")

        print("\nüéâ Configuration pr√™te pour le d√©ploiement!")
        print("\nüìã Prochaines √©tapes:")
        print("1. üîë Configurez les secrets dans GitHub et Supabase")
        print("2. üöÄ Pushez sur la branche main pour d√©clencher le d√©ploiement")
        print("3. üß™ Testez le dashboard avec test_dashboard.py")

        return True


def main():
    """Fonction principale."""
    validator = DeploymentValidator()
    success = validator.run_all_checks()

    if not success:
        exit(1)


if __name__ == "__main__":
    main()
