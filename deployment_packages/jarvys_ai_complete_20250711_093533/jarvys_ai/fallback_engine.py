#!/usr/bin/env python3
"""
üö® JARVYS_AI - Fallback Engine
Syst√®me de fallback vers Cloud Run quand GitHub Actions quotas √©puis√©s
"""

import asyncio
import json
import logging
import os
import subprocess
from datetime import datetime
from typing import Any, Dict, Optional

import requests

logger = logging.getLogger(__name__)


class FallbackEngine:
    """
    üö® Moteur de Fallback

    Fonctionnalit√©s:
    - D√©tection √©puisement quotas GitHub Actions
    - Basculement automatique vers Cloud Run
    - Monitoring des ressources cloud
    - Notification des basculements
    - Retour automatique quand quotas restaur√©s
    """

    def __init__(self, config: Dict[str, Any]):
        """Initialiser le moteur de fallback"""
        self.config = config
        self.is_initialized = False

        # Configuration GitHub
        self.github_token = config.get("github_token")
        self.github_repo = config.get("github_repo", "yannabadie/appia-dev")

        # Configuration Cloud Run
        self.cloud_run_config = {
            "project_id": config.get("gcp_project_id", "appia-demo-project"),
            "region": config.get("gcp_region", "europe-west1"),
            "service_name": "jarvys-fallback-service",
        }

        # √âtat du syst√®me
        self.fallback_active = False
        self.last_quota_check = None
        self.github_quota_exhausted = False

        # Simulation pour d√©mo
        self.demo_mode = config.get("demo_mode", True)

        logger.info("üö® Fallback Engine initialis√©")

    async def initialize(self):
        """Initialiser le moteur de fallback"""
        try:
            if self.demo_mode:
                await self._setup_demo_mode()
            else:
                await self._setup_real_fallback()

            # V√©rifier l'√©tat initial des quotas
            await self._check_github_quotas()

            self.is_initialized = True
            logger.info("üö® Fallback Engine pr√™t")

        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation Fallback Engine: {e}")
            raise

    def is_initialized(self) -> bool:
        """V√©rifier si le moteur est initialis√©"""
        return self.is_initialized

    async def _setup_demo_mode(self):
        """Configuration mode d√©mo"""
        self.demo_quotas = {
            "github_actions": {
                "total_minutes": 2000,
                "used_minutes": 1850,
                "remaining_minutes": 150,
                "reset_date": "2024-02-01",
            },
            "cloud_run": {
                "total_requests": 1000000,
                "used_requests": 25000,
                "remaining_requests": 975000,
            },
        }

        logger.info("üö® Mode d√©mo fallback configur√©")

    async def _setup_real_fallback(self):
        """Configuration fallback r√©el"""
        try:
            # TODO: V√©rifier authentification GitHub et GCP
            # TODO: Configurer Cloud Run service
            # TODO: D√©ployer code de fallback sur Cloud Run

            logger.info("üö® Configuration fallback r√©elle (TODO)")

        except Exception as e:
            logger.error(f"‚ùå Erreur configuration fallback: {e}")
            raise

    async def monitor_quotas(self):
        """Surveiller les quotas en continu"""
        while self.is_initialized:
            try:
                await self._check_github_quotas()
                await self._check_cloud_run_quotas()

                # D√©cider s'il faut basculer
                await self._evaluate_fallback_need()

                # Attendre avant prochaine v√©rification
                await asyncio.sleep(300)  # 5 minutes

            except Exception as e:
                logger.error(f"‚ùå Erreur monitoring quotas: {e}")
                await asyncio.sleep(60)  # 1 minute en cas d'erreur

    async def _check_github_quotas(self) -> Dict[str, Any]:
        """V√©rifier les quotas GitHub Actions"""
        try:
            if self.demo_mode:
                quotas = self.demo_quotas["github_actions"]

                # Simuler √©puisement des quotas
                if quotas["remaining_minutes"] < 100:
                    self.github_quota_exhausted = True
                    logger.warning("‚ö†Ô∏è Quotas GitHub Actions bient√¥t √©puis√©s")

                return quotas

            else:
                # Appel API GitHub r√©el
                headers = {
                    "Authorization": f"token {self.github_token}",
                    "Accept": "application/vnd.github.v3+json",
                }

                url = f"https://api.github.com/repos/{self.github_repo}/actions/billing/usage"
                response = requests.get(url, headers=headers)

                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"‚ùå Erreur API GitHub: {response.status_code}")
                    return {}

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification quotas GitHub: {e}")
            return {}

    async def _check_cloud_run_quotas(self) -> Dict[str, Any]:
        """V√©rifier les quotas Cloud Run"""
        try:
            if self.demo_mode:
                return self.demo_quotas["cloud_run"]
            else:
                # TODO: Appel API Cloud Run pour quotas
                return {}

        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification quotas Cloud Run: {e}")
            return {}

    async def _evaluate_fallback_need(self):
        """√âvaluer s'il faut activer le fallback"""
        try:
            github_quotas = await self._check_github_quotas()

            # Seuil critique: moins de 5% de quota restant
            if github_quotas.get("remaining_minutes", 0) < (
                github_quotas.get("total_minutes", 2000) * 0.05
            ):
                if not self.fallback_active:
                    await self._activate_fallback()

            # Retour normal si quotas restaur√©s
            elif (
                self.fallback_active and github_quotas.get("remaining_minutes", 0) > 100
            ):
                await self._deactivate_fallback()

        except Exception as e:
            logger.error(f"‚ùå Erreur √©valuation fallback: {e}")

    async def _activate_fallback(self):
        """Activer le mode fallback"""
        try:
            logger.warning(
                "üö® Activation du mode fallback - basculement vers Cloud Run"
            )

            if self.demo_mode:
                await self._demo_activate_fallback()
            else:
                await self._real_activate_fallback()

            self.fallback_active = True

            # Notifier le basculement
            await self._notify_fallback_activation()

        except Exception as e:
            logger.error(f"‚ùå Erreur activation fallback: {e}")

    async def _demo_activate_fallback(self):
        """Activation fallback en mode d√©mo"""
        await asyncio.sleep(2)  # Simulation d√©lai d√©ploiement
        logger.info("üö® [D√âMO] Fallback activ√© - Cloud Run op√©rationnel")

    async def _real_activate_fallback(self):
        """Activation fallback r√©elle"""
        try:
            # 1. D√©ployer service Cloud Run
            await self._deploy_fallback_service()

            # 2. Rediriger le trafic
            await self._redirect_traffic_to_fallback()

            # 3. Mettre √† jour la configuration DNS/routing
            await self._update_routing_config()

            logger.info("üö® Fallback r√©el activ√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur activation fallback r√©elle: {e}")
            raise

    async def _deploy_fallback_service(self):
        """D√©ployer le service Cloud Run de fallback"""
        try:
            # Commande gcloud pour d√©ployer
            deploy_cmd = [
                "gcloud",
                "run",
                "deploy",
                self.cloud_run_config["service_name"],
                "--source",
                ".",
                "--platform",
                "managed",
                "--region",
                self.cloud_run_config["region"],
                "--project",
                self.cloud_run_config["project_id"],
                "--allow-unauthenticated",
            ]

            # Ex√©cution en mode d√©mo seulement
            if not self.demo_mode:
                result = subprocess.run(deploy_cmd, capture_output=True, text=True)
                if result.returncode != 0:
                    raise Exception(f"√âchec d√©ploiement: {result.stderr}")

            logger.info("‚òÅÔ∏è Service Cloud Run d√©ploy√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur d√©ploiement Cloud Run: {e}")
            raise

    async def _redirect_traffic_to_fallback(self):
        """Rediriger le trafic vers le service de fallback"""
        # TODO: Impl√©menter redirection trafic
        logger.info("üîÑ Trafic redirig√© vers Cloud Run")

    async def _update_routing_config(self):
        """Mettre √† jour la configuration de routage"""
        # TODO: Mettre √† jour DNS/Load Balancer
        logger.info("üåê Configuration routage mise √† jour")

    async def _deactivate_fallback(self):
        """D√©sactiver le mode fallback"""
        try:
            logger.info("‚úÖ D√©sactivation du mode fallback - retour √† GitHub Actions")

            if self.demo_mode:
                await self._demo_deactivate_fallback()
            else:
                await self._real_deactivate_fallback()

            self.fallback_active = False

            # Notifier le retour normal
            await self._notify_fallback_deactivation()

        except Exception as e:
            logger.error(f"‚ùå Erreur d√©sactivation fallback: {e}")

    async def _demo_deactivate_fallback(self):
        """D√©sactivation fallback en mode d√©mo"""
        await asyncio.sleep(1)  # Simulation d√©lai
        logger.info("‚úÖ [D√âMO] Fallback d√©sactiv√© - retour √† GitHub Actions")

    async def _real_deactivate_fallback(self):
        """D√©sactivation fallback r√©elle"""
        try:
            # 1. Rediriger le trafic vers GitHub Actions
            await self._restore_normal_routing()

            # 2. Optionnellement arr√™ter service Cloud Run pour √©conomiser
            await self._scale_down_fallback_service()

            logger.info("‚úÖ Fallback r√©el d√©sactiv√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur d√©sactivation fallback r√©elle: {e}")
            raise

    async def _notify_fallback_activation(self):
        """Notifier l'activation du fallback"""
        notification = {
            "event": "fallback_activated",
            "timestamp": datetime.now().isoformat(),
            "reason": "github_quota_exhausted",
            "fallback_service": "cloud_run",
        }

        # TODO: Envoyer notification (email, Slack, etc.)
        logger.warning(f"üö® Notification fallback: {notification}")

    async def _notify_fallback_deactivation(self):
        """Notifier la d√©sactivation du fallback"""
        notification = {
            "event": "fallback_deactivated",
            "timestamp": datetime.now().isoformat(),
            "reason": "github_quota_restored",
            "primary_service": "github_actions",
        }

        # TODO: Envoyer notification
        logger.info(f"‚úÖ Notification retour normal: {notification}")

    async def get_fallback_status(self) -> Dict[str, Any]:
        """Obtenir l'√©tat du syst√®me de fallback"""
        github_quotas = await self._check_github_quotas()
        cloud_quotas = await self._check_cloud_run_quotas()

        return {
            "fallback_active": self.fallback_active,
            "github_quota_exhausted": self.github_quota_exhausted,
            "github_quotas": github_quotas,
            "cloud_quotas": cloud_quotas,
            "last_check": self.last_quota_check,
            "fallback_service_url": (
                f"https://{self.cloud_run_config['service_name']}-{self.cloud_run_config['region']}.a.run.app"
                if self.fallback_active
                else None
            ),
        }

    async def force_fallback_test(self):
        """Tester le fallback manuellement"""
        logger.info("üß™ Test manuel du fallback")

        # Sauvegarder √©tat actuel
        original_state = self.fallback_active

        try:
            # Activer fallback
            await self._activate_fallback()
            await asyncio.sleep(5)  # Laisser le temps de se stabiliser

            # V√©rifier que tout fonctionne
            status = await self.get_fallback_status()

            # D√©sactiver fallback
            await self._deactivate_fallback()

            return {
                "test_successful": True,
                "fallback_status": status,
                "message": "Test de fallback r√©ussi",
            }

        except Exception as e:
            logger.error(f"‚ùå √âchec test fallback: {e}")

            # Restaurer √©tat original
            self.fallback_active = original_state

            return {
                "test_successful": False,
                "error": str(e),
                "message": "Test de fallback √©chou√©",
            }

    def get_stats(self) -> Dict[str, Any]:
        """Obtenir statistiques du moteur de fallback"""
        return {
            "is_initialized": self.is_initialized,
            "fallback_active": self.fallback_active,
            "github_quota_exhausted": self.github_quota_exhausted,
            "demo_mode": self.demo_mode,
            "cloud_run_config": self.cloud_run_config,
            "version": "1.0.0",
        }
