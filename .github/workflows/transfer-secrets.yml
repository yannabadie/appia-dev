name: üîë Transfer Secrets to JARVYS_AI

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository for JARVYS_AI'
        required: true
        default: 'yannabadie/appIA'
        type: string

jobs:
  transfer-secrets:
    runs-on: ubuntu-latest
    name: üîë Export secrets to JARVYS_AI repo
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üîß Setup GitHub CLI
        run: |
          # GitHub CLI is pre-installed on GitHub Actions runners
          echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
          gh auth status
      
      - name: üîë Transfer all secrets to JARVYS_AI
        env:
          # Export all secrets from JARVYS_DEV
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_REPO: ${{ secrets.GH_REPO }}
          SECRET_ACCESS_TOKEN: ${{ secrets.SECRET_ACCESS_TOKEN }}
          TARGET_REPO: ${{ inputs.target_repo }}
        run: |
          echo "üîë Starting secrets transfer to $TARGET_REPO"
          
          # Function to set secret in target repo
          set_secret() {
            local secret_name=$1
            local secret_value=$2
            
            if [ -n "$secret_value" ]; then
              echo "üì§ Transferring $secret_name..."
              echo "$secret_value" | gh secret set "$secret_name" -R "$TARGET_REPO" --body -
              if [ $? -eq 0 ]; then
                echo "‚úÖ $secret_name transferred successfully"
              else
                echo "‚ùå Failed to transfer $secret_name"
              fi
            else
              echo "‚ö†Ô∏è  $secret_name is empty, skipping"
            fi
          }
          
          # Transfer all secrets
          set_secret "OPENAI_API_KEY" "$OPENAI_API_KEY"
          set_secret "SUPABASE_URL" "$SUPABASE_URL"
          set_secret "SUPABASE_KEY" "$SUPABASE_KEY"
          set_secret "SUPABASE_ACCESS_TOKEN" "$SUPABASE_ACCESS_TOKEN"
          set_secret "SUPABASE_PROJECT_ID" "$SUPABASE_PROJECT_ID"
          set_secret "SUPABASE_SERVICE_ROLE" "$SUPABASE_SERVICE_ROLE"
          set_secret "GEMINI_API_KEY" "$GEMINI_API_KEY"
          set_secret "GCP_SA_JSON" "$GCP_SA_JSON"
          set_secret "GH_TOKEN" "$GH_TOKEN"
          set_secret "GH_REPO" "$GH_REPO"
          set_secret "SECRET_ACCESS_TOKEN" "$SECRET_ACCESS_TOKEN"
          
          # Add JARVYS_AI specific secrets
          echo "üì§ Adding JARVYS_AI specific configuration..."
          echo "yannabadie/appia-dev" | gh secret set "JARVYS_DEV_REPO" -R "$TARGET_REPO" --body -
          echo "from_jarvys_dev" | gh secret set "JARVYS_ISSUE_LABEL" -R "$TARGET_REPO" --body -
          
          echo "‚úÖ All secrets transferred successfully!"
      
      - name: üìã Verify secrets in target repo
        env:
          TARGET_REPO: ${{ inputs.target_repo }}
        run: |
          echo "üìã Verifying secrets in $TARGET_REPO:"
          gh secret list -R "$TARGET_REPO"
          
          echo ""
          echo "üéâ Secrets transfer completed!"
          echo "üîó Target repository: https://github.com/$TARGET_REPO"
          echo "üìù JARVYS_AI can now access all JARVYS_DEV secrets"
