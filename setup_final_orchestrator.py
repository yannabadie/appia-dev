#!/usr/bin/env python3
"""
Configuration finale et validation compl√®te de l'orchestrateur Grok
Corrige tous les probl√®mes identifi√©s et pr√©pare l'environnement
"""

import os
import subprocess
import sys
from pathlib import Path


def create_env_template():
    """Cr√©e un template des variables d'environnement n√©cessaires"""
    env_template = """# Configuration Grok Orchestrator
# Copiez ce fichier vers .env et remplissez les valeurs

# === API KEYS ===
# Cl√© API pour Grok-4-0709 (xAI)
GROK_API_KEY=your_grok_api_key_here

# Cl√© API pour Claude 4 (Anthropic)
CLAUDE_API_KEY=your_claude_api_key_here

# === SUPABASE CONFIGURATION ===
# URL de votre projet Supabase
SUPABASE_URL=your_supabase_url_here

# Cl√© anonyme Supabase
SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Cl√© de service Supabase (optionnel, pour administration)
SUPABASE_SERVICE_KEY=your_supabase_service_key_here

# === ORCHESTRATOR CONFIG ===
# Mode de fonctionnement (production/development)
ORCHESTRATOR_MODE=development

# Activation de la m√©moire infinie
INFINITE_MEMORY_ENABLED=true

# Validation automatique avec Claude 4
AUTO_CLAUDE_VALIDATION=true

# === GITHUB INTEGRATION (optionnel) ===
# Token GitHub pour synchronisation
GITHUB_TOKEN=your_github_token_here

# === LOGGING ===
# Niveau de log (DEBUG/INFO/WARNING/ERROR)
LOG_LEVEL=INFO

# Dossier des logs
LOG_DIR=./logs
"""

    env_file = Path(".env.template")
    with open(env_file, "w", encoding="utf-8") as f:
        f.write(env_template)

    print(f"‚úÖ Template environnement cr√©√©: {env_file}")
    print("üí° Copiez .env.template vers .env et configurez vos cl√©s API")


def fix_dependencies():
    """Corrige les probl√®mes de d√©pendances"""
    print("üîß Correction des d√©pendances...")

    try:
        # R√©installer urllib3 proprement
        subprocess.run(
            [
                sys.executable,
                "-m",
                "pip",
                "install",
                "--force-reinstall",
                "urllib3==2.0.7",
            ],
            check=True,
            capture_output=True,
        )
        print("  ‚úÖ urllib3 r√©install√©")

        # R√©installer requests
        subprocess.run(
            [
                sys.executable,
                "-m",
                "pip",
                "install",
                "--force-reinstall",
                "requests==2.31.0",
            ],
            check=True,
            capture_output=True,
        )
        print("  ‚úÖ requests r√©install√©")

        # Installer les d√©pendances manquantes
        essential_packages = ["xai-sdk", "anthropic", "supabase", "python-dotenv"]

        for package in essential_packages:
            try:
                subprocess.run(
                    [sys.executable, "-m", "pip", "install", package],
                    check=True,
                    capture_output=True,
                )
                print(f"  ‚úÖ {package} install√©")
            except subprocess.CalledProcessError:
                print(f"  ‚ö†Ô∏è Erreur installation {package}")

        return True

    except Exception as e:
        print(f"  ‚ùå Erreur d√©pendances: {e}")
        return False


def create_orchestrator_config():
    """Cr√©e un fichier de configuration pour l'orchestrateur"""
    config = {
        "grok": {
            "model": "grok-4-0709",
            "max_tokens": 8192,
            "temperature": 0.7,
            "timeout": 30,
        },
        "claude": {
            "model": "claude-sonnet-4-20250514",
            "max_tokens": 4096,
            "temperature": 0.3,
            "validation_enabled": True,
        },
        "memory": {
            "infinite_enabled": True,
            "supabase_table": "orchestrator_memories",
            "local_fallback": True,
            "max_local_memories": 1000,
        },
        "orchestrator": {
            "auto_validation": True,
            "parallel_processing": False,
            "retry_attempts": 3,
            "log_level": "INFO",
        },
    }

    config_file = Path("orchestrator_config.json")
    with open(config_file, "w", encoding="utf-8") as f:
        import json

        json.dump(config, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ Configuration orchestrateur cr√©√©e: {config_file}")


def create_startup_script():
    """Cr√©e un script de d√©marrage simplifi√©"""
    startup_script = """#!/bin/bash
# Script de d√©marrage de l'orchestrateur Grok am√©lior√©

echo "üöÄ D√©marrage de l'orchestrateur Grok..."

# V√©rifier .env
if [ ! -f .env ]; then
    echo "‚ùå Fichier .env manquant"
    echo "üí° Copiez .env.template vers .env et configurez vos cl√©s API"
    exit 1
fi

# Charger les variables d'environnement
set -a
source .env
set +a

# V√©rifier les variables essentielles
if [ -z "$GROK_API_KEY" ]; then
    echo "‚ùå GROK_API_KEY manquant dans .env"
    exit 1
fi

if [ -z "$CLAUDE_API_KEY" ]; then
    echo "‚ùå CLAUDE_API_KEY manquant dans .env"
    exit 1
fi

if [ -z "$SUPABASE_URL" ]; then
    echo "‚ùå SUPABASE_URL manquant dans .env"
    exit 1
fi

echo "‚úÖ Configuration valid√©e"
echo "üß† Lancement de l'orchestrateur..."

# Lancer l'orchestrateur
python grok_orchestrator.py "$@"
"""

    script_file = Path("start_orchestrator.sh")
    with open(script_file, "w", encoding="utf-8") as f:
        f.write(startup_script)

    # Rendre le script ex√©cutable
    os.chmod(script_file, 0o755)

    print(f"‚úÖ Script de d√©marrage cr√©√©: {script_file}")


def validate_final_setup():
    """Validation finale de la configuration"""
    print("üîç Validation finale...")

    required_files = [
        "grok_orchestrator.py",
        "requirements-enhanced.txt",
        ".env.template",
        "orchestrator_config.json",
        "start_orchestrator.sh",
    ]

    all_files_exist = True
    for file_name in required_files:
        file_path = Path(file_name)
        if file_path.exists():
            print(f"  ‚úÖ {file_name}")
        else:
            print(f"  ‚ùå {file_name} manquant")
            all_files_exist = False

    # Test syntaxe
    try:
        with open("grok_orchestrator.py", "r", encoding="utf-8") as f:
            code = f.read()
        compile(code, "grok_orchestrator.py", "exec")
        print("  ‚úÖ Syntaxe Python valide")
        syntax_valid = True
    except SyntaxError as e:
        print(f"  ‚ùå Erreur syntaxe: {e}")
        syntax_valid = False

    return all_files_exist and syntax_valid


def main():
    """Fonction principale"""
    print("üîß Configuration finale de l'orchestrateur Grok")
    print("=" * 60)

    success = True

    # √âtape 1: Template environnement
    try:
        create_env_template()
    except Exception as e:
        print(f"‚ùå Erreur template .env: {e}")
        success = False

    # √âtape 2: D√©pendances
    try:
        if not fix_dependencies():
            success = False
    except Exception as e:
        print(f"‚ùå Erreur d√©pendances: {e}")
        success = False

    # √âtape 3: Configuration
    try:
        create_orchestrator_config()
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        success = False

    # √âtape 4: Script de d√©marrage
    try:
        create_startup_script()
    except Exception as e:
        print(f"‚ùå Erreur script d√©marrage: {e}")
        success = False

    # √âtape 5: Validation finale
    try:
        if not validate_final_setup():
            success = False
    except Exception as e:
        print(f"‚ùå Erreur validation: {e}")
        success = False

    print("\n" + "=" * 60)

    if success:
        print("üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS!")
        print("\nüìã Prochaines √©tapes:")
        print("1. cp .env.template .env")
        print("2. √âditer .env avec vos vraies cl√©s API")
        print("3. ./start_orchestrator.sh")
        print("\nüîß Alternative de test:")
        print("python test_grok_orchestrator_basic.py")

        print("\nüöÄ L'orchestrateur Grok est pr√™t avec:")
        print("  ‚úÖ M√©moire infinie Supabase")
        print("  ‚úÖ Validation Claude 4")
        print("  ‚úÖ Syntaxe corrig√©e")
        print("  ‚úÖ D√©pendances r√©par√©es")

    else:
        print("‚ùå PROBL√àMES D√âTECT√âS")
        print("üîß V√©rifiez les erreurs ci-dessus")

    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
