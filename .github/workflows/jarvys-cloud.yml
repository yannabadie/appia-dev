name: üå©Ô∏è JARVYS_DEV Cloud Deployment

on:
  push:
    branches: [ main, dev ]
  schedule:
    # Ex√©cution autonome toutes les heures
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Mode d\'ex√©cution'
        required: true
        default: 'autonomous'
        type: choice
        options:
        - autonomous
        - analysis
        - memory_sync
        - dashboard_deploy

env:
  AGENT_NAME: "JARVYS_DEV"
  ENVIRONMENT: "cloud"
  
jobs:
  deploy-dashboard:
    name: üìä D√©ployer Dashboard Supabase
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'dashboard_deploy' || github.event_name == 'push'
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîß Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: üöÄ Deploy Edge Functions
      run: |
        echo "D√©ploiement du dashboard sur Supabase..."
        # D√©ployer les Edge Functions
        supabase functions deploy dashboard --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        
        # Appliquer le sch√©ma de base de donn√©es
        supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}

  autonomous-agent:
    name: ü§ñ Agent Autonome Cloud
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'autonomous' || github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: üîÑ Checkout Repository  
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: üì¶ Install Dependencies
      run: |
        pip install poetry
        poetry install --with dev
        
    - name: üîê Validate Environment
      run: |
        echo "üîç Validation de l'environnement cloud pour JARVYS_DEV"
        python -c "
        import os
        required = ['OPENAI_API_KEY', 'GITHUB_TOKEN', 'SUPABASE_URL', 'SUPABASE_KEY', 'GEMINI_API_KEY']
        missing = [var for var in required if not os.getenv(var)]
        if missing:
            print(f'‚ùå Variables manquantes: {missing}')
            exit(1)
        print('‚úÖ Toutes les variables d\'environnement sont d√©finies')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
        
    - name: üìä Update Agent Status
      run: |
        python -c "
        from src.jarvys_dev.tools.memory_infinite import get_memory
        memory = get_memory('JARVYS_DEV', 'cloud_status')
        memory.memorize(
            'Agent JARVYS_DEV d√©marr√© en mode cloud sur GitHub Actions',
            memory_type='experience',
            importance_score=0.7,
            tags=['startup', 'cloud', 'github_actions']
        )
        print('‚úÖ Statut agent mis √† jour dans la m√©moire infinie')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        
    - name: ü§ñ Test Orchestrateur Intelligent
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from jarvys_dev.intelligent_orchestrator import get_orchestrator
        
        orchestrator = get_orchestrator()
        print(f'üß† Orchestrateur: {len(orchestrator.models_db)} mod√®les disponibles')
        
        # Test s√©lection mod√®le optimal
        task = orchestrator.analyze_task('Analyse complexe de donn√©es', 'auto')
        model, info, score = orchestrator.select_optimal_model(task)
        print(f'üéØ Mod√®le optimal pour analyse: {model} (score: {score:.2f})')
        
        # Afficher stats
        stats = orchestrator.get_orchestrator_stats()
        print(f'üìä Stats: {stats}')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: üîÑ Mise √† jour automatique mod√®les
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from jarvys_dev.auto_model_updater import get_auto_updater
        
        print('üîç V√©rification nouveaux mod√®les...')
        updater = get_auto_updater()
        updates = updater.check_for_updates()
        
        if updates:
            print(f'üÜï {len(updates)} mises √† jour trouv√©es')
            print(updater.get_update_report())
            
            # Appliquer mises √† jour recommand√©es
            results = updater.apply_updates(updates)
            print(f'‚úÖ Mises √† jour appliqu√©es: {results}')
        else:
            print('‚úÖ Tous les mod√®les sont √† jour')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: üìä Import donn√©es personnelles OpenAI
      if: github.event.inputs.mode == 'memory_sync' || github.event_name == 'workflow_dispatch'
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from jarvys_dev.openai_data_importer import import_yann_abadie_data
        
        print('üìß Import donn√©es personnelles Yann Abadie...')
        results = import_yann_abadie_data()
        
        print(f'‚úÖ Import termin√©:')
        print(f'  üìß Emails: {len(results.get(\"imported_emails\", []))}')
        print(f'  üí¨ Conversations: {results.get(\"total_conversations\", 0)}')
        print(f'  üß† M√©moires: {results.get(\"total_memories\", 0)}')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        
    - name: üöÄ Run Autonomous Loop
      run: |
        echo "ü§ñ Lancement de la boucle autonome JARVYS_DEV (Cloud) avec orchestrateur intelligent"
        timeout 45m poetry run python -m jarvys_dev.langgraph_loop || echo "‚è∞ Timeout normal - cycle termin√©"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
        CONFIDENCE_SCORE: "0.85"
        
    - name: üìà Log Metrics to Dashboard
      if: always()
      run: |
        python -c "
        import os, requests, json
        from datetime import datetime
        
        # M√©triques de la session
        metrics = {
            'agent_type': 'JARVYS_DEV',
            'event_type': 'autonomous_run',
            'service': 'github_actions',
            'success': True,
            'metadata': {
                'environment': 'cloud',
                'trigger': '${{ github.event_name }}',
                'run_id': '${{ github.run_id }}',
                'ref': '${{ github.ref }}'
            },
            'user_context': 'system'
        }
        
        # Envoyer au dashboard Supabase
        dashboard_url = f\"{os.getenv('SUPABASE_URL')}/functions/v1/dashboard/api/metrics\"
        headers = {
            'Authorization': f\"Bearer {os.getenv('SUPABASE_KEY')}\",
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(dashboard_url, json=metrics, headers=headers, timeout=10)
            if response.status_code == 200:
                print('‚úÖ M√©triques envoy√©es au dashboard')
            else:
                print(f'‚ö†Ô∏è Erreur dashboard: {response.status_code}')
        except Exception as e:
            print(f'‚ö†Ô∏è Erreur envoi m√©triques: {e}')
        "
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

  memory-sync:
    name: üß† Synchronisation M√©moire
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'memory_sync' || github.event_name == 'schedule'
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: üì¶ Install Dependencies
      run: |
        pip install poetry
        poetry install --only main
        
    - name: üß† Sync Shared Memory
      run: |
        python -c "
        from src.jarvys_dev.tools.memory_infinite import get_memory
        import json
        
        print('üß† Synchronisation de la m√©moire partag√©e...')
        
        # M√©moire pour JARVYS_DEV
        memory_dev = get_memory('JARVYS_DEV', 'shared')
        
        # M√©moriser l'√©tat du repository
        memory_dev.memorize(
            f'Repository {\"${{ github.repository }}\"} mis √† jour le {\"${{ github.event.head_commit.timestamp or \"unknown\" }}\"}',
            memory_type='knowledge',
            importance_score=0.6,
            tags=['repository', 'update', 'github']
        )
        
        # Stats de la m√©moire
        stats = memory_dev.get_memory_stats()
        print(f'üìä Stats m√©moire: {json.dumps(stats, indent=2)}')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

  analysis:
    name: üîç Analyse et Optimisation
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'analysis' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: üì¶ Install Dependencies  
      run: |
        pip install poetry
        poetry install --with dev
        
    - name: üß™ Run Tests
      run: |
        echo "üß™ Ex√©cution des tests pour validation"
        poetry run pytest -v --tb=short
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        
    - name: üìä Generate Analytics Report
      run: |
        python -c "
        from src.jarvys_dev.tools.memory_infinite import get_memory
        import json
        from datetime import datetime
        
        print('üìä G√©n√©ration du rapport d\\'analyse...')
        
        memory = get_memory('JARVYS_DEV', 'analytics')
        
        # Analyser l'activit√© r√©cente
        recent_activity = memory.recall('github activity analysis', limit=20)
        
        # M√©moriser l'analyse
        analysis = f'''
        Analyse automatique du {datetime.now().strftime(\"%Y-%m-%d %H:%M\")}:
        - Repository: ${{ github.repository }}
        - Commit: ${{ github.sha }}
        - Tests: Pass√©s avec succ√®s
        - M√©moire: {len(recent_activity)} activit√©s r√©centes analys√©es
        - Mode: Autonome cloud sur GitHub Actions
        '''
        
        memory.memorize(
            analysis,
            memory_type='knowledge',
            importance_score=0.8,
            tags=['analysis', 'automation', 'github_actions']
        )
        
        print('‚úÖ Rapport d\\'analyse m√©moris√©')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

  notify-completion:
    name: üì¢ Notification Fin d'Ex√©cution
    runs-on: ubuntu-latest
    needs: [autonomous-agent, memory-sync, analysis]
    if: always()
    
    steps:
    - name: üìä Create Summary Issue
      uses: actions/github-script@v7
      if: github.event_name == 'schedule' || github.event.inputs.mode == 'autonomous'
      with:
        script: |
          const now = new Date().toISOString();
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          const title = `ü§ñ JARVYS_DEV - Rapport d'ex√©cution autonome ${now.split('T')[0]}`;
          
          const body = `
          ## üöÄ Rapport d'Ex√©cution Autonome JARVYS_DEV
          
          **üìÖ Date**: ${now}  
          **üå©Ô∏è Environnement**: Cloud (GitHub Actions)  
          **üîó Run**: [${context.runId}](${runUrl})  
          **‚ö° Trigger**: ${context.eventName}
          
          ### üìä R√©sultats
          
          ‚úÖ **Agent autonome**: ${{ needs.autonomous-agent.result }}  
          ‚úÖ **Synchronisation m√©moire**: ${{ needs.memory-sync.result }}  
          ‚úÖ **Analyse**: ${{ needs.analysis.result }}
          
          ### üß† M√©moire Infinie
          
          La m√©moire partag√©e entre JARVYS_DEV et JARVYS_AI a √©t√© mise √† jour avec les nouvelles exp√©riences et connaissances acquises durant cette session.
          
          ### üìà Dashboard
          
          Les m√©triques sont disponibles sur le dashboard auto-h√©berg√© Supabase.
          
          ---
          *G√©n√©r√© automatiquement par JARVYS_DEV en mode cloud*
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['from_jarvys_dev', 'autonomous-report', 'cloud']
          });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
