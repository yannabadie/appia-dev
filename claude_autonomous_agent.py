# claude_autonomous_agent_fixed.py
"""
Claude 4 Opus Agent avec gestion d'erreurs Supabase
"""

import asyncio
import json
import logging
import os
from datetime import datetime, timedelta
from typing import Any, Dict, List

import anthropic
from github import Github

from supabase import Client, create_client

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ClaudeOpusAgent:
    """Agent autonome Claude 4 Opus pour JARVYS - Version corrig√©e"""

    def __init__(self):
        # Initialisation des clients
        self.claude = anthropic.AsyncAnthropic(api_key=os.getenv("CLAUDE_API_KEY", ""))
        self.github = Github(os.getenv("GH_TOKEN"))

        # Initialiser Supabase avec gestion d'erreur
        try:
            self.supabase: Client = create_client(
                os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_SERVICE_ROLE")
            )
            self.supabase_available = True
            self._check_tables()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Supabase non disponible: {e}")
            self.supabase_available = False

        # Configuration
        self.repos = {
            "dev": os.getenv("GH_REPO_DEV", "yannabadie/appia-dev"),
            "ai": os.getenv("GH_REPO_AI", "yannabadie/appIA"),
        }
        self.cost_limit_daily = float(os.getenv("DAILY_COST_LIMIT", "3.0"))
        self.current_costs = 0.0

    def _check_tables(self):
        """V√©rifier si les tables Supabase existent"""
        try:
            # Test simple pour v√©rifier si la table existe
            self.supabase.table("agent_logs").select("id").limit(1).execute()
            logger.info("‚úÖ Tables Supabase disponibles")
        except Exception as e:
            if "does not exist" in str(e):
                logger.error(
                    "‚ùå Tables Supabase manquantes! Cr√©ez-les avec le script SQL fourni."
                )
                self.supabase_available = False
            else:
                logger.error(f"‚ùå Erreur Supabase: {e}")
                self.supabase_available = False

    async def autonomous_loop(self):
        """Boucle principale autonome avec gestion d'erreurs"""
        while True:
            try:
                logger.info("ü§ñ D√©but du cycle autonome Claude 4 Opus")

                # Mode d√©grad√© si Supabase non disponible
                if not self.supabase_available:
                    logger.warning("‚ö†Ô∏è Mode d√©grad√©: Supabase non disponible")
                    # Continuer sans logging Supabase
                else:
                    # V√©rifier les co√ªts
                    if not await self.check_costs():
                        logger.warning("‚ö†Ô∏è Limite de co√ªts atteinte")
                        await asyncio.sleep(3600)
                        continue

                # Scanner les probl√®mes
                issues = await self.scan_for_issues()

                if issues:
                    logger.info(f"üìä {len(issues)} probl√®mes d√©tect√©s")

                    # Prioriser et ex√©cuter
                    prioritized_tasks = await self.prioritize_tasks(issues)

                    for task in prioritized_tasks[:3]:
                        await self.execute_task(task)

                    # Cr√©er des PRs si GitHub disponible
                    await self.create_pull_requests()
                else:
                    logger.info("‚úÖ Aucun probl√®me d√©tect√©")

                # Logger l'activit√© si possible
                if self.supabase_available:
                    await self.log_activity()

                logger.info("‚úÖ Cycle termin√©, pause de 5 minutes")
                await asyncio.sleep(300)

            except Exception as e:
                logger.error(f"‚ùå Erreur dans le cycle: {e}")
                await self.log_error_safe(str(e))
                await asyncio.sleep(60)

    async def check_costs(self) -> bool:
        """V√©rifier les co√ªts avec gestion d'erreur"""
        if not self.supabase_available:
            # En mode d√©grad√©, on continue toujours
            return True

        try:
            yesterday = (datetime.now() - timedelta(days=1)).isoformat()
            result = (
                self.supabase.table("agent_logs")
                .select("costs")
                .gte("timestamp", yesterday)
                .execute()
            )

            total_costs = sum(log.get("costs", 0) for log in result.data)
            return total_costs < self.cost_limit_daily
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier les co√ªts: {e}")
            return True  # Continuer en cas d'erreur

    async def scan_for_issues(self) -> List[Dict[str, Any]]:
        """Scanner les repos pour identifier les probl√®mes"""
        issues = []

        for repo_type, repo_name in self.repos.items():
            try:
                repo = self.github.get_repo(repo_name)

                # Scanner les issues GitHub
                for issue in repo.get_issues(state="open", labels=["claude-fix"]):
                    issues.append(
                        {
                            "type": "github_issue",
                            "repo": repo_type,
                            "number": issue.number,
                            "title": issue.title,
                            "body": issue.body,
                            "labels": [l.name for l in issue.labels],
                        }
                    )

                # Scanner un fichier de test
                try:
                    contents = repo.get_contents("grok_orchestrator.py")
                    if contents:
                        issues.append(
                            {
                                "type": "code_review",
                                "repo": repo_type,
                                "file": "grok_orchestrator.py",
                                "description": "R√©vision de code demand√©e",
                            }
                        )
                except:
                    pass

            except Exception as e:
                logger.error(f"Erreur scan {repo_name}: {e}")

        return issues

    async def prioritize_tasks(
        self, issues: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """Prioriser les t√¢ches avec Claude 4 Opus"""
        if not issues:
            return []

        try:
            prompt = f"""Priorise ces t√¢ches selon leur impact:
            {json.dumps(issues, indent=2)}
            
            Retourne un JSON avec les t√¢ches ordonn√©es par priorit√©."""

            response = await self.claude.messages.create(
                model="claude-opus-4-20250514",  # Claude 4 Opus
                max_tokens=2000,
                messages=[{"role": "user", "content": prompt}],
            )

            # Parser la r√©ponse
            text = response.content[0].text
            if "```json" in text:
                text = text.split("```json")[1].split("```")[0]

            return json.loads(text)
        except Exception as e:
            logger.error(f"Erreur prioritisation: {e}")
            return issues  # Retourner non tri√© en cas d'erreur

    async def execute_task(self, task: Dict[str, Any]):
        """Ex√©cuter une t√¢che"""
        logger.info(
            f"üîß Ex√©cution: {task.get('title', task.get('description', 'T√¢che'))}"
        )

        try:
            if task["type"] == "code_review":
                await self.review_code(task)
            elif task["type"] == "github_issue":
                await self.handle_github_issue(task)
        except Exception as e:
            logger.error(f"Erreur ex√©cution t√¢che: {e}")

    async def review_code(self, task: Dict[str, Any]):
        """R√©viser du code avec Claude 4 Opus"""
        logger.info(f"üìù R√©vision de code: {task['file']}")

        try:
            # Analyser avec Claude
            prompt = f"""Analyse ce fichier Python et sugg√®re des am√©liorations:
            Fichier: {task['file']}
            
            Fournis:
            1. Probl√®mes critiques
            2. Suggestions d'am√©lioration
            3. Exemples de code corrig√©"""

            response = await self.claude.messages.create(
                model="claude-opus-4-20250514",
                max_tokens=2000,
                messages=[{"role": "user", "content": prompt}],
            )

            logger.info("‚úÖ Analyse termin√©e")

            # Sauvegarder localement
            with open(f"claude_review_{task['file']}.md", "w") as f:
                f.write(f"# R√©vision Claude 4 Opus - {task['file']}\n\n")
                f.write(response.content[0].text)

        except Exception as e:
            logger.error(f"Erreur r√©vision: {e}")

    async def handle_github_issue(self, task: Dict[str, Any]):
        """Traiter une issue GitHub"""
        logger.info(f"üêõ Traitement issue #{task['number']}: {task['title']}")

        # Simuler le traitement
        await asyncio.sleep(2)
        logger.info(f"‚úÖ Issue #{task['number']} analys√©e")

    async def create_pull_requests(self):
        """Cr√©er des PRs (simplifi√©)"""
        logger.info("üì§ V√©rification des PRs √† cr√©er...")
        # Impl√©mentation simplifi√©e

    async def log_activity(self):
        """Logger l'activit√© avec gestion d'erreur"""
        if not self.supabase_available:
            return

        try:
            log_entry = {
                "timestamp": datetime.now().isoformat(),
                "agent": "claude_4_opus",
                "activity": "autonomous_cycle",
                "costs": self.current_costs,
                "tasks_completed": 1,
                "status": "success",
            }

            self.supabase.table("agent_logs").insert(log_entry).execute()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de logger l'activit√©: {e}")

    async def log_error_safe(self, error: str):
        """Logger une erreur de mani√®re s√ªre"""
        logger.error(f"Erreur logg√©e: {error}")

        if self.supabase_available:
            try:
                self.supabase.table("agent_logs").insert(
                    {
                        "timestamp": datetime.now().isoformat(),
                        "agent": "claude_4_opus",
                        "activity": "error",
                        "status": "error",
                        "error_message": error[:500],  # Limiter la taille
                    }
                ).execute()
            except:
                pass  # Ignorer les erreurs de logging


# Classe simplifi√©e pour VS Code (optionnel)
class VSCodeClaudeExtension:
    def __init__(self, agent: ClaudeOpusAgent):
        self.agent = agent
        self.port = 8765

    async def start_server(self):
        """D√©marrer le serveur (simplifi√©)"""
        logger.info(f"üöÄ Serveur VS Code simul√© sur port {self.port}")
        # Version simplifi√©e sans websockets
        while True:
            await asyncio.sleep(60)


async def main():
    """Point d'entr√©e principal"""
    # V√©rifier les variables
    if not os.getenv("CLAUDE_API_KEY"):
        logger.error("‚ùå CLAUDE_API_KEY manquante!")
        print("\nPour ajouter votre cl√© Claude:")
        print("1. https://github.com/settings/codespaces")
        print("2. Ajoutez CLAUDE_API_KEY dans les secrets")
        return

    # Cr√©er l'agent
    agent = ClaudeOpusAgent()

    # Mode simple sans websocket
    if agent.supabase_available:
        logger.info("‚úÖ Mode complet avec Supabase")
    else:
        logger.info("‚ö†Ô∏è Mode d√©grad√© sans Supabase")
        print("\nPour activer Supabase:")
        print("1. Cr√©ez les tables avec le script SQL fourni")
        print("2. V√©rifiez vos cl√©s SUPABASE_URL et SUPABASE_SERVICE_ROLE")

    # Lancer l'agent
    await agent.autonomous_loop()


if __name__ == "__main__":
    asyncio.run(main())
