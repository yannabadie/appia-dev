#!/usr/bin/env python3
"""
Script de validation de la coh√©rence des noms de secrets d'environnement.
V√©rifie que tous les secrets utilis√©s dans le code correspondent aux secrets d√©clar√©s.
"""

import re
from collections import defaultdict
from pathlib import Path


def extract_secrets_from_file(filepath):
    """Extrait tous les secrets d'environnement d'un fichier."""
    secrets = set()

    try:
        with open(filepath, "r", encoding="utf-8") as f:
            content = f.read()

        # Patterns pour d√©tecter les secrets
        patterns = [
            r'os\.getenv\(["\']([^"\']+)["\']\)',  # os.getenv("SECRET")
            r'os\.environ\[["\']([^"\']+)["\']\]',  # os.environ["SECRET"]
            r'getenv\(["\']([^"\']+)["\']\)',  # getenv("SECRET")
            r"secrets\.([A-Z_]+)",  # secrets.SECRET_NAME
            r'Deno\.env\.get\(["\']([^"\']+)["\']\)',  # Deno.env.get("SECRET")
            r"\$\{\{\s*secrets\.([A-Z_]+)\s*\}\}",  # ${{ secrets.SECRET }}
            r"\$\{localEnv:([A-Z_]+)\}",  # ${localEnv:SECRET}
        ]

        for pattern in patterns:
            matches = re.findall(pattern, content)
            for match in matches:
                # Ignorer les exemples g√©n√©riques
                if match in ["SECRET_NAME", "VARIABLE_NAME", "SECRET"]:
                    continue
                if match and match.isupper() and "_" in match:
                    secrets.add(match)

    except Exception as e:
        print(f"Erreur lecture {filepath}: {e}")

    return secrets


def load_declared_secrets():
    """Charge la liste des secrets d√©clar√©s depuis source_secrets.txt."""
    secrets_file = Path(__file__).parent / "source_secrets.txt"
    declared_secrets = set()

    if secrets_file.exists():
        with open(secrets_file, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#"):
                    # Format: SECRET_NAME<tab>timestamp
                    secret_name = line.split("\t")[0]
                    if secret_name:
                        declared_secrets.add(secret_name)

    return declared_secrets


def scan_repository():
    """Scanne tout le repository pour les secrets utilis√©s."""
    repo_root = Path(__file__).parent
    used_secrets = defaultdict(list)

    # Patterns de fichiers √† scanner
    file_patterns = [
        "**/*.py",
        "**/*.yml",
        "**/*.yaml",
        "**/*.ts",
        "**/*.js",
        "**/*.json",
        "**/*.toml",
        "**/*.md",
    ]

    # Dossiers √† ignorer
    ignore_dirs = {
        ".git",
        "__pycache__",
        ".pytest_cache",
        "node_modules",
        ".venv",
        "venv",
        "deployment_packages",
    }

    for pattern in file_patterns:
        for filepath in repo_root.rglob(pattern):
            # Ignorer les dossiers sp√©cifiques
            if any(ignore_dir in filepath.parts for ignore_dir in ignore_dirs):
                continue

            secrets = extract_secrets_from_file(filepath)
            for secret in secrets:
<<<<<<< HEAD
                used_secrets[secret].append(str(filepath.relative_to(repo_root)))
=======
                used_secrets[secret].append(
                    str(filepath.relative_to(repo_root))
                )
>>>>>>> origin/main

    return used_secrets


def main():
    """Fonction principale de validation."""
    print("üîç Validation de la coh√©rence des secrets d'environnement\n")

    # Charger les secrets d√©clar√©s
    declared_secrets = load_declared_secrets()
    print(f"üìã Secrets d√©clar√©s ({len(declared_secrets)}):")
    for secret in sorted(declared_secrets):
        print(f"  ‚úÖ {secret}")
    print()

    # Scanner le repository
    used_secrets = scan_repository()
    print(f"üîé Secrets utilis√©s dans le code ({len(used_secrets)}):")
    for secret in sorted(used_secrets.keys()):
        print(f"  üìÑ {secret}")
    print()

    # V√©rifier la coh√©rence
    missing_declarations = used_secrets.keys() - declared_secrets
    unused_declarations = declared_secrets - used_secrets.keys()

    # Rapport des incoh√©rences
    if missing_declarations:
        print("‚ùå Secrets utilis√©s mais non d√©clar√©s:")
        for secret in sorted(missing_declarations):
            print(f"  üö® {secret}")
            print(f"     Utilis√© dans: {', '.join(used_secrets[secret][:3])}")
            if len(used_secrets[secret]) > 3:
<<<<<<< HEAD
                print(f"     ... et {len(used_secrets[secret]) - 3} autres fichiers")
=======
                print(
                    f"     ... et {len(used_secrets[secret]) - 3} autres fichiers"
                )
>>>>>>> origin/main
        print()

    if unused_declarations:
        print("‚ö†Ô∏è  Secrets d√©clar√©s mais non utilis√©s:")
        for secret in sorted(unused_declarations):
            print(f"  üî∏ {secret}")
        print()

    # R√©sum√©
    if not missing_declarations and not unused_declarations:
        print("‚úÖ Tous les secrets sont coh√©rents!")
        return 0
    else:
        print("üìä R√©sum√©:")
<<<<<<< HEAD
        print(f"  - Secrets coh√©rents: {len(declared_secrets & used_secrets.keys())}")
=======
        print(
            f"  - Secrets coh√©rents: {len(declared_secrets & used_secrets.keys())}"
        )
>>>>>>> origin/main
        print(f"  - Manquent d√©clarations: {len(missing_declarations)}")
        print(f"  - D√©clarations inutilis√©es: {len(unused_declarations)}")
        return 1


if __name__ == "__main__":
    exit(main())
