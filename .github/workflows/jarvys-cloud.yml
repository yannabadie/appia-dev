name: 🌩️ JARVYS_DEV Cloud Deployment

on:
  push:
    branches: [ main, dev ]
  schedule:
    # Exécution autonome toutes les heures
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: "Mode d'exécution"
        required: true
        default: 'autonomous'
        type: choice
        options:
        - autonomous
        - analysis
        - memory_sync
        - dashboard_deploy

env:
  AGENT_NAME: "JARVYS_DEV"
  ENVIRONMENT: "cloud"
  
jobs:
  deploy-dashboard:
    name: 📊 Déployer Dashboard Supabase
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'dashboard_deploy' || github.event_name == 'push'
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: � Test Authentication
      run: |
        echo "🔐 Test de l'authentification Supabase..."
        if [ -z "$SUPABASE_ACCESS_TOKEN" ]; then
          echo "❌ SUPABASE_ACCESS_TOKEN manquant"
          exit 1
        fi
        if [ -z "$SUPABASE_PROJECT_ID" ]; then
          echo "❌ SUPABASE_PROJECT_ID manquant"
          exit 1
        fi
        echo "✅ Secrets disponibles"
        echo "📋 Version Supabase CLI: $(supabase --version)"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        
    - name: �🚀 Deploy Edge Functions
      run: |
        echo "🚀 Déploiement des Edge Functions JARVYS..."
        
        # Vérifier la configuration Supabase
        if [ ! -f "supabase/config.toml" ]; then
          echo "❌ Fichier supabase/config.toml manquant"
          exit 1
        fi
        
        echo "✅ Configuration Supabase trouvée"
        
        # Créer la fonction jarvys-dashboard si elle n'existe pas
        if [ ! -d "supabase/functions/jarvys-dashboard" ]; then
          echo "� Création de la fonction jarvys-dashboard..."
          mkdir -p supabase/functions/jarvys-dashboard
          cat > supabase/functions/jarvys-dashboard/index.ts << 'EOF'
        import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

        serve(async (req) => {
          const url = new URL(req.url)
          
          // Basic routing
          if (url.pathname === '/api/health') {
            return new Response(
              JSON.stringify({ 
                status: "healthy",
                service: "JARVYS Dashboard",
                timestamp: new Date().toISOString(),
                version: "1.0.0"
              }),
              { 
                headers: { "Content-Type": "application/json" },
                status: 200 
              }
            )
          }
          
          // Default dashboard response
          return new Response(
            JSON.stringify({ 
              message: "🚀 JARVYS Dashboard déployé avec succès !",
              timestamp: new Date().toISOString(),
              status: "active",
              endpoints: {
                health: "/api/health",
                dashboard: "/"
              }
            }),
            { 
              headers: { "Content-Type": "application/json" },
              status: 200 
            }
          )
        })
        EOF
        fi
        
        echo "📁 Contenu des fonctions:"
        ls -la supabase/functions/
        
        # Authentification avec Supabase
        echo "$SUPABASE_ACCESS_TOKEN" | supabase login --token
        
        # Déployer la fonction
        echo "🚀 Déploiement de jarvys-dashboard..."
        supabase functions deploy jarvys-dashboard --project-ref "$SUPABASE_PROJECT_ID" --debug
        
        echo "✅ Déploiement terminé avec succès !"
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

  autonomous-agent:
    name: 🤖 Agent Autonome Cloud  
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'autonomous' || github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: 🔄 Checkout Repository  
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Install Basic Dependencies
      run: |
        pip install poetry requests
        # Test if poetry.lock exists
        if [ -f "poetry.lock" ]; then
          echo "📋 Installing from poetry.lock..."
          poetry install --only main --no-dev
        else
          echo "⚠️ poetry.lock not found, installing basic requirements..."
          [ -f "requirements.txt" ] && pip install -r requirements.txt || echo "No requirements.txt found"
        fi
        
    - name: 🔐 Validate Environment
      run: |
        echo "🔍 Validation de l'environnement cloud pour JARVYS_DEV"
        python -c "
        import os
        required = ['OPENAI_API_KEY', 'GITHUB_TOKEN', 'SUPABASE_URL', 'SUPABASE_KEY', 'GEMINI_API_KEY']
        missing = [var for var in required if not os.getenv(var)]
        if missing:
            print(f'❌ Variables manquantes: {missing}')
            exit(1)
        print('✅ Toutes les variables d\'environnement sont définies')
        print('🚀 Environment validated successfully!')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
        
    - name: 🧪 Basic Python Test
      run: |
        echo "🧪 Test Python de base..."
        python -c "
        import sys, os, json
        from datetime import datetime
        
        print(f'🐍 Python version: {sys.version}')
        print(f'📁 Current directory: {os.getcwd()}')
        print(f'� Environment vars: {len([k for k in os.environ.keys() if not k.startswith(\"_\")])} variables')
        print(f'⏰ Timestamp: {datetime.now().isoformat()}')
        print('✅ Basic Python test passed!')
        "
        
    - name: � Simple Metrics Log
      if: always()
      run: |
        echo "📊 Logging simple metrics..."
        python -c "
        import os, json
        from datetime import datetime
        
        # Simple metrics
        metrics = {
            'agent_type': 'JARVYS_DEV',
            'event_type': 'basic_test',
            'service': 'github_actions',
            'success': True,
            'timestamp': datetime.now().isoformat(),
            'metadata': {
                'environment': 'cloud',
                'trigger': '${{ github.event_name }}',
                'run_id': '${{ github.run_id }}',
                'ref': '${{ github.ref }}'
            }
        }
        
        print(f'📊 Metrics: {json.dumps(metrics, indent=2)}')
        print('✅ Metrics generated successfully!')
        "
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

  memory-sync:
    name: 🧠 Synchronisation Mémoire
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'memory_sync' || github.event_name == 'schedule'
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Install Dependencies
      run: |
        pip install poetry
        poetry install --only main
        
    - name: 🧠 Sync Shared Memory
      run: |
        python -c "
        from src.jarvys_dev.tools.memory_infinite import get_memory
        import json
        
        print('🧠 Synchronisation de la mémoire partagée...')
        
        # Mémoire pour JARVYS_DEV
        memory_dev = get_memory('JARVYS_DEV', 'shared')
        
        # Mémoriser l'état du repository
        memory_dev.memorize(
            f'Repository {\"${{ github.repository }}\"} mis à jour le ${{ github.event.head_commit.timestamp }}',
            memory_type='knowledge',
            importance_score=0.6,
            tags=['repository', 'update', 'github']
        )
        
        # Stats de la mémoire
        stats = memory_dev.get_memory_stats()
        print(f'📊 Stats mémoire: {json.dumps(stats, indent=2)}')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

  analysis:
    name: 🔍 Analyse et Optimisation
    runs-on: ubuntu-latest
    if: github.event.inputs.mode == 'analysis' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Install Dependencies  
      run: |
        pip install poetry
        poetry install --with dev
        
    - name: 🧪 Run Tests
      run: |
        echo "🧪 Exécution des tests pour validation"
        poetry run pytest -v --tb=short
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        
    - name: 📊 Generate Analytics Report
      run: |
        python -c "
        from src.jarvys_dev.tools.memory_infinite import get_memory
        import json
        from datetime import datetime
        
        print('📊 Génération du rapport d\\'analyse...')
        
        memory = get_memory('JARVYS_DEV', 'analytics')
        
        # Analyser l'activité récente
        recent_activity = memory.recall('github activity analysis', limit=20)
        
        # Mémoriser l'analyse
        analysis = f'''
        Analyse automatique du {datetime.now().strftime(\"%Y-%m-%d %H:%M\")}:
        - Repository: ${{ github.repository }}
        - Commit: ${{ github.sha }}
        - Tests: Passés avec succès
        - Mémoire: {len(recent_activity)} activités récentes analysées
        - Mode: Autonome cloud sur GitHub Actions
        '''
        
        memory.memorize(
            analysis,
            memory_type='knowledge',
            importance_score=0.8,
            tags=['analysis', 'automation', 'github_actions']
        )
        
        print('✅ Rapport d\\'analyse mémorisé')
        "
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

  notify-completion:
    name: 📢 Notification Fin d'Exécution
    runs-on: ubuntu-latest
    needs: [autonomous-agent, memory-sync, analysis]
    if: always()
    
    steps:
    - name: 📊 Create Summary Issue
      uses: actions/github-script@v7
      if: github.event_name == 'schedule' || github.event.inputs.mode == 'autonomous'
      with:
          script: |
            const now = new Date().toISOString();
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            const title = `🤖 JARVYS_DEV - Rapport d'exécution autonome ${now.split('T')[0]}`;
            
            const body = `
            ## 🚀 Rapport d'Exécution Autonome JARVYS_DEV
            
            **📅 Date**: ${now}  
            **🌩️ Environnement**: Cloud (GitHub Actions)  
            **🔗 Run**: [${context.runId}](${runUrl})  
            **⚡ Trigger**: ${context.eventName}
            
            ### 📊 Résultats
            
            ✅ **Agent autonome**: ${{ needs.autonomous-agent.result }}  
            ✅ **Synchronisation mémoire**: ${{ needs.memory-sync.result }}  
            ✅ **Analyse**: ${{ needs.analysis.result }}
            
            ### 🧠 Mémoire Infinie
            
            La mémoire partagée entre JARVYS_DEV et JARVYS_AI a été mise à jour avec les nouvelles expériences et connaissances acquises durant cette session.
            
            ### 📈 Dashboard
            
            Les métriques sont disponibles sur le dashboard auto-hébergé Supabase.
            
            ---
            *Généré automatiquement par JARVYS_DEV en mode cloud*
            `;
            
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['from_jarvys_dev', 'autonomous-report', 'cloud']
              });
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
