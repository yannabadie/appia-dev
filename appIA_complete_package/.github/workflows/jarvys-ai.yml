name: ü§ñ JARVYS_AI - Agent Local Autonome

on:
  issues:
    types: [opened, reopened]
  workflow_dispatch:
    inputs:
      task:
        description: 'T√¢che √† ex√©cuter par JARVYS_AI'
        required: true
        type: string
      priority:
        description: 'Priorit√© de la t√¢che'
        required: false
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical
  schedule:
    - cron: '*/30 * * * *'  # Toutes les 30 minutes

env:
  JARVYS_MODE: production
  JARVYS_AGENT_TYPE: local

jobs:
  jarvys-ai-handler:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'from_jarvys_dev')
    name: ü§ñ Traitement issue JARVYS_DEV
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: ü§ñ Process JARVYS_DEV issue
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "ü§ñ JARVYS_AI traite l'issue #$ISSUE_NUMBER"
          echo "üìã Titre: $ISSUE_TITLE"
          
          # Lancer JARVYS_AI pour traiter l'issue
          python src/jarvys_ai/main.py             --mode=issue_handler             --issue-number="$ISSUE_NUMBER"             --issue-title="$ISSUE_TITLE"             --issue-body="$ISSUE_BODY"
      
      - name: ‚úÖ Marquer issue comme trait√©e
        uses: actions/github-script@v6
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER;
            
            // Commenter l'issue
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issueNumber,
              body: "‚úÖ **JARVYS_AI a trait√© cette t√¢che**\n\n" +
                    "ü§ñ Agent local autonome activ√©\n" +
                    "üìä Analyse et ex√©cution termin√©es\n" +
                    "‚è∞ Trait√© le: " + new Date().toISOString() + "\n\n" +
                    "*T√¢che automatiquement ferm√©e par JARVYS_AI*"
            });
            
            // Fermer l'issue
            await github.rest.issues.update({
              ...context.repo,
              issue_number: issueNumber,
              state: 'closed'
            });

  jarvys-ai-autonomous:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    name: üîÑ Boucle autonome JARVYS_AI
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: ü§ñ Run JARVYS_AI autonomous loop
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          JARVYS_DEV_REPO: ${{ secrets.JARVYS_DEV_REPO }}
          TASK_INPUT: ${{ inputs.task }}
          TASK_PRIORITY: ${{ inputs.priority }}
        run: |
          echo "üîÑ D√©marrage de la boucle autonome JARVYS_AI"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üìã T√¢che manuelle: $TASK_INPUT (priorit√©: $TASK_PRIORITY)"
            python src/jarvys_ai/main.py               --mode=manual_task               --task="$TASK_INPUT"               --priority="$TASK_PRIORITY"
          else
            echo "‚è∞ Boucle programm√©e toutes les 30 minutes"
            python src/jarvys_ai/main.py --mode=autonomous
          fi
      
      - name: üìä Report metrics to dashboard
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "üìä Envoi des m√©triques au dashboard JARVYS_DEV"
          python src/jarvys_ai/dashboard_integration.py --report-metrics

  jarvys-ai-health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    name: ‚ù§Ô∏è V√©rification sant√© JARVYS_AI
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: ‚ù§Ô∏è Health check and self-diagnosis
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "‚ù§Ô∏è V√©rification de sant√© JARVYS_AI"
          
          # Test connexion Supabase
          curl -f "$SUPABASE_URL/rest/v1/"             -H "apikey: $SUPABASE_KEY"             || echo "‚ö†Ô∏è Probl√®me connexion Supabase"
          
          # Test GitHub API
          curl -f "https://api.github.com/user"             -H "Authorization: token $GH_TOKEN"             || echo "‚ö†Ô∏è Probl√®me connexion GitHub"
          
          echo "‚úÖ V√©rification termin√©e"
