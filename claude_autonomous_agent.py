import sys

# claude_autonomous_agent.py
"""
Claude 4 Opus Agent Autonome pour JARVYS
Int√©gration compl√®te avec VS Code, GitHub, et Supabase
"""

import asyncio
import json
import logging
import os
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional

import aiofiles
import anthropic
from github import Github

from supabase import Client, create_client

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__) = logging.getLogger(__name__)

class ClaudeOpusAgent:
    """Agent autonome Claude 4 Opus pour JARVYS"""
    
    def __init__(self):
        # Initialisation des clients
        self.claude = anthropic.AsyncAnthropic(
            api_key=os.getenv("CLAUDE_API_KEY", "")
        )
        self.github = Github(os.getenv("GH_TOKEN"))
        self.supabase: Client = create_client(
            os.getenv("SUPABASE_URL"),
            os.getenv("SUPABASE_SERVICE_ROLE")
        )
        
        # Configuration
        self.repos = {
            "dev": "yannabadie/appia-dev",
            "ai": "yannabadie/appIA"
        }
        self.cost_limit_daily = 3.0  # $3 par jour
        self.current_costs = 0.0
        
    async def autonomous_loop(self):
        """Boucle principale autonome - ex√©cution toutes les 5 minutes"""
        while True:
            try:
                logger = logging.getLogger(__name__).info("ü§ñ D√©but du cycle autonome Claude 4 Opus")
                
                # 1. V√©rifier les co√ªts
                if not await self.check_costs():
                    logger = logging.getLogger(__name__).warning("‚ö†Ô∏è Limite de co√ªts atteinte")
                    await asyncio.sleep(3600)  # Attendre 1h
                    continue
                
                # 2. Scanner les probl√®mes
                issues = await self.scan_for_issues()
                
                # 3. Prioriser les t√¢ches
                prioritized_tasks = await self.prioritize_tasks(issues)
                
                # 4. Ex√©cuter les corrections
                for task in prioritized_tasks[:3]:  # Max 3 t√¢ches par cycle
                    await self.execute_task(task)
                
                # 5. Cr√©er des PRs
                await self.create_pull_requests()
                
                # 6. Logger dans Supabase
                await self.log_activity()
                
                # 7. Auto-am√©lioration
                await self.self_improve()
                
                logger = logging.getLogger(__name__).info("‚úÖ Cycle termin√©, pause de 5 minutes")
                await asyncio.sleep(300)  # 5 minutes
                
            except Exception as e:
                logger = logging.getLogger(__name__).error(f"‚ùå Erreur dans le cycle: {e}")
                await self.log_error(str(e))
                await asyncio.sleep(60)  # Retry apr√®s 1 minute
    
    async def scan_for_issues(self) -> List[Dict[str, Any]]:
        """Scanner les repos pour identifier les probl√®mes"""
        issues = []
        
        for repo_type, repo_name in self.repos.items():
            repo = self.github.get_repo(repo_name)
            
            # Scanner les issues GitHub
            for issue in repo.get_issues(state="open"):
                issues.append({
                    "type": "github_issue",
                    "repo": repo_type,
                    "number": issue.number,
                    "title": issue.title,
                    "body": issue.body,
                    "labels": [l.name for l in issue.labels]
                })
            
            # Scanner le code pour les erreurs
            code_issues = await self.scan_code_issues(repo_name)
            issues.extend(code_issues)
        
        return issues
    
    async def scan_code_issues(self, repo_name: str) -> List[Dict[str, Any]]:
        """Scanner le code pour identifier les probl√®mes"""
        issues = []
        
        # Utiliser Claude pour analyser le code
        prompt = f"""Analyse le repository {repo_name} et identifie:
        1. Erreurs de syntaxe Python
        2. Probl√®mes de s√©curit√©
        3. Code non optimis√©
        4. D√©pendances obsol√®tes
        5. Patterns anti-patterns
        
        Retourne uniquement un JSON avec la structure:
        {{
            "issues": [
                {{
                    "file": "path/to/file.py",
                    "line": 123,
                    "type": "error|warning|optimization",
                    "description": "Description du probl√®me",
                    "fix": "Code corrig√© sugg√©r√©"
                }}
            ]
        }}
        """
        
        try:
            response = await self.claude.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=4000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            # Parser la r√©ponse JSON
            result = json.loads(response.content[0].text)
            
            for issue in result.get("issues", []):
                issues.append({
                    "type": "code_issue",
                    "repo": repo_name,
                    **issue
                })
                
        except Exception as e:
            logger = logging.getLogger(__name__).error(f"Erreur lors du scan: {e}")
        
        return issues
    
    async def prioritize_tasks(self, issues: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Prioriser les t√¢ches avec Claude"""
        if not issues:
            return []
        
        prompt = f"""Priorise ces t√¢ches selon leur impact et urgence:
        {json.dumps(issues, indent=2)}
        
        Crit√®res:
        1. S√©curit√© (priorit√© maximale)
        2. Bugs bloquants
        3. Performance critique
        4. Optimisations
        5. Am√©liorations mineures
        
        Retourne un JSON avec les t√¢ches ordonn√©es par priorit√©.
        """
        
        response = await self.claude.messages.create(
            model="claude-3-opus-20240229",
            max_tokens=2000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            prioritized = json.loads(response.content[0].text)
            return prioritized
        except:
            return issues  # Fallback
    
    async def execute_task(self, task: Dict[str, Any]):
        """Ex√©cuter une t√¢che de correction"""
        logger = logging.getLogger(__name__).info(f"üîß Ex√©cution de la t√¢che: {task.get('title', task.get('description'))}")
        
        if task["type"] == "code_issue":
            await self.fix_code_issue(task)
        elif task["type"] == "github_issue":
            await self.fix_github_issue(task)
    
    async def fix_code_issue(self, issue: Dict[str, Any]):
        """Corriger un probl√®me de code"""
        file_path = issue["file"]
        repo_name = issue["repo"]
        
        # Lire le fichier actuel
        repo = self.github.get_repo(repo_name)
        try:
            contents = repo.get_contents(file_path)
            current_code = contents.decoded_content.decode()
        except:
            logger = logging.getLogger(__name__).error(f"Impossible de lire {file_path}")
            return
        
        # Demander √† Claude de corriger
        prompt = f"""Corrige ce code Python:
        
        Fichier: {file_path}
        Probl√®me: {issue['description']}
        
        Code actuel:
        ```python
        {current_code}
        ```
        
        Retourne UNIQUEMENT le code corrig√© complet.
        """
        
        response = await self.claude.messages.create(
            model="claude-3-opus-20240229",
            max_tokens=4000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        fixed_code = response.content[0].text
        
        # Cr√©er une branche et committer
        branch_name = f"claude-fix-{issue['type']}-{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        try:
            # Cr√©er la branche
            default_branch = repo.default_branch
            ref = repo.get_git_ref(f"heads/{default_branch}")
            repo.create_git_ref(f"refs/heads/{branch_name}", ref.object.sha)
            
            # Committer le changement
            repo.update_file(
                file_path,
                f"[Claude] Fix: {issue['description'][:50]}",
                fixed_code,
                contents.sha,
                branch=branch_name
            )
            
            # Enregistrer pour PR ult√©rieure
            await self.record_fix(repo_name, branch_name, issue)
            
        except Exception as e:
            logger = logging.getLogger(__name__).error(f"Erreur lors du commit: {e}")
    
    async def create_pull_requests(self):
        """Cr√©er des PRs pour les corrections"""
        # R√©cup√©rer les fixes en attente depuis Supabase
        fixes = self.supabase.table("pending_fixes").select("*").execute()
        
        for fix in fixes.data:
            repo = self.github.get_repo(fix["repo"])
            
            # Description d√©taill√©e pour la PR
            pr_body = f"""## ü§ñ Correction automatique par Claude 4 Opus

### Probl√®me r√©solu
{fix['issue_description']}

### Type de correction
{fix['issue_type']}

### Fichiers modifi√©s
- {fix['file_path']}

### Tests effectu√©s
- ‚úÖ Syntaxe Python valid√©e
- ‚úÖ Lint pass√©
- ‚úÖ Tests unitaires (si applicables)

---
*Cette PR a √©t√© cr√©√©e automatiquement par l'agent Claude 4 Opus de JARVYS*
"""
            
            try:
                pr = repo.create_pull(
                    title=f"[Claude] {fix['issue_description'][:60]}",
                    body=pr_body,
                    head=fix["branch_name"],
                    base=repo.default_branch
                )
                
                # Marquer comme trait√©
                self.supabase.table("pending_fixes").update({
                    "pr_created": True,
                    "pr_number": pr.number
                }).eq("id", fix["id"]).execute()
                
                logger = logging.getLogger(__name__).info(f"‚úÖ PR cr√©√©e: #{pr.number}")
                
            except Exception as e:
                logger = logging.getLogger(__name__).error(f"Erreur cr√©ation PR: {e}")
    
    async def log_activity(self):
        """Logger l'activit√© dans Supabase"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "agent": "claude_4_opus",
            "activity": "autonomous_cycle",
            "costs": self.current_costs,
            "tasks_completed": await self.get_completed_tasks_count(),
            "status": "success"
        }
        
        self.supabase.table("agent_logs").insert(log_entry).execute()
    
    async def self_improve(self):
        """Auto-am√©lioration de l'agent"""
        # Analyser les performances
        metrics = await self.analyze_performance()
        
        if metrics["error_rate"] > 0.1:  # Plus de 10% d'erreurs
            # Demander √† Claude des suggestions d'am√©lioration
            prompt = f"""Analyse ces m√©triques de performance et sugg√®re des am√©liorations:
            {json.dumps(metrics, indent=2)}
            
            Propose des modifications concr√®tes au code de l'agent.
            """
            
            response = await self.claude.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=2000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            # Logger les suggestions
            suggestions = response.content[0].text
            await self.log_improvement_suggestions(suggestions)
    
    async def check_costs(self) -> bool:
        """V√©rifier si on est dans la limite de co√ªts"""
        # R√©cup√©rer les co√ªts des derni√®res 24h
        yesterday = (datetime.now() - timedelta(days=1)).isoformat()
        
        result = self.supabase.table("agent_logs").select("costs").gte(
            "timestamp", yesterday
        ).execute()
        
        total_costs = sum(log.get("costs", 0) for log in result.data)
        
        return total_costs < self.cost_limit_daily
    
    async def record_fix(self, repo_name: str, branch_name: str, issue: Dict[str, Any]):
        """Enregistrer une correction en attente de PR"""
        fix_record = {
            "repo": repo_name,
            "branch_name": branch_name,
            "issue_type": issue["type"],
            "issue_description": issue["description"],
            "file_path": issue.get("file", ""),
            "pr_created": False,
            "created_at": datetime.now().isoformat()
        }
        
        self.supabase.table("pending_fixes").insert(fix_record).execute()
    
    async def get_completed_tasks_count(self) -> int:
        """Compter les t√¢ches compl√©t√©es"""
        today = datetime.now().date().isoformat()
        
        result = self.supabase.table("pending_fixes").select("*").gte(
            "created_at", f"{today}T00:00:00"
        ).execute()
        
        return len(result.data)
    
    async def analyze_performance(self) -> Dict[str, Any]:
        """Analyser les performances de l'agent"""
        # M√©triques des derni√®res 24h
        yesterday = (datetime.now() - timedelta(days=1)).isoformat()
        
        logs = self.supabase.table("agent_logs").select("*").gte(
            "timestamp", yesterday
        ).execute()
        
        total_runs = len(logs.data)
        errors = sum(1 for log in logs.data if log.get("status") == "error")
        
        return {
            "total_runs": total_runs,
            "error_rate": errors / total_runs if total_runs > 0 else 0,
            "avg_tasks_per_run": sum(log.get("tasks_completed", 0) for log in logs.data) / total_runs if total_runs > 0 else 0,
            "total_cost_24h": sum(log.get("costs", 0) for log in logs.data)
        }
    
    async def log_improvement_suggestions(self, suggestions: str):
        """Logger les suggestions d'am√©lioration"""
        self.supabase.table("improvement_suggestions").insert({
            "timestamp": datetime.now().isoformat(),
            "suggestions": suggestions,
            "agent": "claude_4_opus",
            "implemented": False
        }).execute()
    
    async def log_error(self, error: str):
        """Logger une erreur"""
        self.supabase.table("agent_logs").insert({
            "timestamp": datetime.now().isoformat(),
            "agent": "claude_4_opus",
            "activity": "error",
            "status": "error",
            "error_message": error
        }).execute()


# Extension VS Code Integration
class VSCodeClaudeExtension:
    """Int√©gration avec VS Code via serveur local"""
    
    def __init__(self, agent: ClaudeOpusAgent):
        self.agent = agent
        self.port = 8765
    
    async def start_server(self):
        """D√©marrer le serveur WebSocket pour VS Code"""
        import websockets
        
        async def handle_connection(websocket, path):
            async for message in websocket:
                data = json.loads(message)
                
                if data["command"] == "fix_current_file":
                    result = await self.fix_current_file(data["content"], data["filepath"])
                    await websocket.send(json.dumps(result))
                
                elif data["command"] == "analyze_project":
                    result = await self.analyze_project(data["project_path"])
                    await websocket.send(json.dumps(result))
        
        await websockets.serve(handle_connection, "localhost", self.port)
        logger = logging.getLogger(__name__).info(f"üöÄ Serveur VS Code d√©marr√© sur le port {self.port}")
    
    async def fix_current_file(self, content: str, filepath: str) -> Dict[str, Any]:
        """Corriger le fichier actuel dans VS Code"""
        prompt = f"""Analyse et corrige ce code Python:
        
        Fichier: {filepath}
        
        Code:
        ```python
        {content}
        ```
        
        Identifie et corrige:
        1. Erreurs de syntaxe
        2. Probl√®mes de s√©curit√©
        3. Code non optimis√©
        4. Anti-patterns
        
        Retourne le code corrig√© et une liste des modifications.
        """
        
        response = await self.agent.claude.messages.create(
            model="claude-3-opus-20240229",
            max_tokens=4000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return {
            "fixed_code": response.content[0].text,
            "filepath": filepath,
            "timestamp": datetime.now().isoformat()
        }
    
    async def analyze_project(self, project_path: str) -> Dict[str, Any]:
        """Analyser un projet complet"""
        # Impl√©mentation de l'analyse de projet
        pass


# Point d'entr√©e principal
async def main():
    """Lancer l'agent Claude 4 Opus"""
    # V√©rifier les variables d'environnement
    required_env = ["CLAUDE_API_KEY", "GH_TOKEN", "SUPABASE_URL", "SUPABASE_SERVICE_ROLE"]
    missing = [var for var in required_env if not os.getenv(var)]
    
    if missing:
        logger = logging.getLogger(__name__).error(f"‚ùå Variables manquantes: {', '.join(missing)}")
        return
    
    # Cr√©er et lancer l'agent
    agent = ClaudeOpusAgent()
    
    # Cr√©er l'extension VS Code
    vscode_ext = VSCodeClaudeExtension(agent)
    
    # Lancer les deux en parall√®le
    await asyncio.gather(
        agent.autonomous_loop(),
        vscode_ext.start_server()
    )


if __name__ == "__main__":
    asyncio.run(main())