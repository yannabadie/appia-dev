#!/bin/bash
# setup_claude_opus_agent.sh - Version avec variables d'environnement GitHub
# Utilise UNIQUEMENT les secrets d√©j√† configur√©s dans GitHub

set -e

echo "üöÄ Configuration de Claude 4 Opus Agent pour JARVYS"
echo "================================================="

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# V√©rifier qu'on est dans le bon r√©pertoire
if [ ! -f "grok_orchestrator.py" ]; then
    echo -e "${RED}‚ö†Ô∏è  Assurez-vous d'√™tre dans /workspaces/appia-dev${NC}"
    exit 1
fi

# Afficher les variables d'environnement d√©tect√©es
echo -e "\n${YELLOW}üîç D√©tection des variables d'environnement GitHub...${NC}"

# Fonction pour v√©rifier une variable
check_env_var() {
    local var_name=$1
    if [ ! -z "${!var_name}" ]; then
        echo -e "${GREEN}‚úì${NC} $var_name d√©tect√© (${#var_name} caract√®res)"
        return 0
    else
        echo -e "${RED}‚úó${NC} $var_name non trouv√©"
        return 1
    fi
}

# V√©rifier toutes les variables
echo -e "\n${BLUE}Variables d'API:${NC}"
check_env_var "CLAUDE_API_KEY"
check_env_var "OPENAI_API_KEY"
check_env_var "GEMINI_API_KEY"
check_env_var "XAI_API_KEY"

echo -e "\n${BLUE}Variables GitHub:${NC}"
check_env_var "GH_TOKEN" || check_env_var "GITHUB_TOKEN"
check_env_var "GH_REPO"

echo -e "\n${BLUE}Variables Supabase:${NC}"
check_env_var "SUPABASE_URL"
check_env_var "SUPABASE_SERVICE_ROLE"
check_env_var "SUPABASE_KEY"
check_env_var "SUPABASE_ACCESS_TOKEN"
check_env_var "SUPABASE_PROJECT_ID"

echo -e "\n${BLUE}Variables GCP:${NC}"
check_env_var "GCP_SA_JSON"

# Cr√©er un fichier .env qui r√©f√©rence les variables d'environnement
echo -e "\n${YELLOW}üìù Cr√©ation du fichier .env...${NC}"

cat > .env << 'EOF'
# Ce fichier utilise les variables d'environnement GitHub/Codespaces
# Aucun secret n'est hardcod√© ici

# API Keys - depuis les secrets GitHub
CLAUDE_API_KEY=${CLAUDE_API_KEY}
OPENAI_API_KEY=${OPENAI_API_KEY}
GEMINI_API_KEY=${GEMINI_API_KEY}
XAI_API_KEY=${XAI_API_KEY}

# GitHub - utilise le token du Codespace
GH_TOKEN=${GH_TOKEN:-${GITHUB_TOKEN}}
GH_REPO=${GH_REPO:-yannabadie/appia-dev}
GH_REPO_DEV=${GH_REPO_DEV:-yannabadie/appia-dev}
GH_REPO_AI=${GH_REPO_AI:-yannabadie/appIA}

# Supabase - depuis les secrets GitHub
SUPABASE_URL=${SUPABASE_URL}
SUPABASE_SERVICE_ROLE=${SUPABASE_SERVICE_ROLE}
SUPABASE_KEY=${SUPABASE_KEY}
SUPABASE_ACCESS_TOKEN=${SUPABASE_ACCESS_TOKEN}
SUPABASE_PROJECT_ID=${SUPABASE_PROJECT_ID}

# GCP
GCP_SA_JSON=${GCP_SA_JSON}

# Configuration par d√©faut
DAILY_COST_LIMIT=${DAILY_COST_LIMIT:-3.0}
CHECK_INTERVAL=${CHECK_INTERVAL:-300}
MAX_TASKS_PER_CYCLE=${MAX_TASKS_PER_CYCLE:-3}

# Secret Access Token (si disponible)
SECRET_ACCESS_TOKEN=${SECRET_ACCESS_TOKEN}
EOF

echo -e "${GREEN}‚úÖ Fichier .env cr√©√© (utilise les variables d'environnement)${NC}"

# Mettre √† jour claude_autonomous_agent.py
echo -e "\n${YELLOW}ü§ñ Mise √† jour du mod√®le Claude 4 Opus...${NC}"

if [ -f "claude_autonomous_agent.py" ]; then
    # Remplacer par le bon mod√®le Claude 4 Opus
    sed -i 's/claude-3-opus-20240229/claude-opus-4-20250514/g' claude_autonomous_agent.py
    echo -e "${GREEN}‚úÖ Mod√®le mis √† jour: claude-opus-4-20250514${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  Fichier claude_autonomous_agent.py non trouv√©${NC}"
fi

# Cr√©er un script de test pour v√©rifier les variables
echo -e "\n${YELLOW}üß™ Cr√©ation du script de test...${NC}"

cat > test_env_vars.py << 'EOF'
#!/usr/bin/env python3
"""
Test des variables d'environnement GitHub
"""
import os
from dotenv import load_dotenv

# Charger le .env (qui r√©f√©rence les variables d'environnement)
load_dotenv()

print("üîç Test des Variables d'Environnement")
print("=" * 50)

# Variables √† tester
vars_to_check = [
    "CLAUDE_API_KEY",
    "OPENAI_API_KEY", 
    "GEMINI_API_KEY",
    "XAI_API_KEY",
    "GH_TOKEN",
    "GITHUB_TOKEN",
    "SUPABASE_URL",
    "SUPABASE_SERVICE_ROLE",
    "SUPABASE_KEY"
]

print("\nüìã R√©sultats:")
for var in vars_to_check:
    value = os.getenv(var)
    if value:
        # Masquer partiellement la valeur
        masked = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
        print(f"‚úÖ {var}: {masked}")
    else:
        print(f"‚ùå {var}: Non trouv√©")

# Test sp√©cifique pour Claude
claude_key = os.getenv("CLAUDE_API_KEY")
if claude_key and claude_key.startswith("sk-ant-"):
    print("\n‚úÖ CLAUDE_API_KEY semble valide")
else:
    print("\n‚ö†Ô∏è  CLAUDE_API_KEY manquante ou invalide")
    print("   Ajoutez-la dans les secrets GitHub de votre Codespace")
EOF

chmod +x test_env_vars.py

# Cr√©er le script de lancement qui utilise les variables d'environnement
cat > run_claude.sh << 'EOF'
#!/bin/bash
# Lance Claude avec les variables d'environnement GitHub

echo "ü§ñ D√©marrage de Claude 4 Opus Agent..."

# Les variables sont d√©j√† dans l'environnement, pas besoin de les charger
# V√©rifier seulement que Claude API Key existe
if [ -z "$CLAUDE_API_KEY" ]; then
    echo "‚ùå CLAUDE_API_KEY non trouv√©e dans les variables d'environnement"
    echo ""
    echo "Pour ajouter la cl√© Claude:"
    echo "1. Allez dans Settings > Secrets > Codespaces"
    echo "2. Ajoutez CLAUDE_API_KEY avec votre cl√©"
    echo "3. Recr√©ez le Codespace ou red√©marrez-le"
    exit 1
fi

echo "‚úÖ Variables d'environnement d√©tect√©es"
echo "üöÄ Lancement de l'agent..."

# Lancer avec Poetry
poetry run python claude_autonomous_agent.py
EOF

chmod +x run_claude.sh

# Script pour afficher comment ajouter des secrets
cat > add_secrets_help.sh << 'EOF'
#!/bin/bash
# Aide pour ajouter des secrets GitHub

echo "üìö Guide pour ajouter des secrets dans GitHub Codespaces"
echo "======================================================"
echo ""
echo "1. Allez sur: https://github.com/settings/codespaces"
echo ""
echo "2. Dans 'Repository secrets', ajoutez:"
echo "   - CLAUDE_API_KEY"
echo "   - Autres cl√©s si n√©cessaire"
echo ""
echo "3. Les secrets seront disponibles comme variables d'environnement"
echo "   dans tous vos Codespaces"
echo ""
echo "4. Pour v√©rifier: echo \$CLAUDE_API_KEY"
echo ""
echo "Note: Les secrets sont masqu√©s dans les logs pour la s√©curit√©"
EOF

chmod +x add_secrets_help.sh

# Installer les d√©pendances
echo -e "\n${YELLOW}üì¶ Installation des d√©pendances...${NC}"

if command -v poetry &> /dev/null; then
    poetry add anthropic python-dotenv --quiet 2>/dev/null || true
else
    pip install anthropic python-dotenv
fi

# R√©sum√© final
echo -e "\n${GREEN}‚úÖ Configuration termin√©e!${NC}"
echo -e "\n${BLUE}üìã R√©sum√©:${NC}"
echo "- Utilise les variables d'environnement GitHub (pas de secrets hardcod√©s)"
echo "- Mod√®le Claude 4 Opus: claude-opus-4-20250514"
echo "- Scripts cr√©√©s: run_claude.sh, test_env_vars.py"

# V√©rifier si CLAUDE_API_KEY existe
if [ -z "$CLAUDE_API_KEY" ]; then
    echo -e "\n${RED}‚ö†Ô∏è  IMPORTANT: CLAUDE_API_KEY non d√©tect√©e${NC}"
    echo "Ex√©cutez: ./add_secrets_help.sh pour voir comment l'ajouter"
else
    echo -e "\n${GREEN}‚úÖ CLAUDE_API_KEY d√©tect√©e${NC}"
    echo "Vous pouvez lancer: ./run_claude.sh"
fi

echo -e "\n${BLUE}üöÄ Commandes disponibles:${NC}"
echo "- Test des variables: poetry run python test_env_vars.py"
echo "- Lancer Claude: ./run_claude.sh"
echo "- Aide secrets: ./add_secrets_help.sh"