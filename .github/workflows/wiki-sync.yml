---
name: Wiki Documentation Sync

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'scripts/generate_wiki_docs.py'
      - 'pyproject.toml'
      - 'poetry.lock'
  workflow_dispatch: {}

jobs:
  update-wiki:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: cache-poetry
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          # V√©rifier et corriger le lock file si n√©cessaire
          if ! poetry lock --check; then
            echo "‚ö†Ô∏è Lock file obsol√®te, r√©g√©n√©ration..."
            poetry lock
          fi
          poetry install --with dev --no-interaction --no-interaction

      - name: Validate installation
        run: |
          poetry run python -c "import jarvys_dev; print('‚úÖ Module jarvys_dev import√© avec succ√®s')"

      - name: Generate Wiki Documentation
        run: |
          poetry run python scripts/generate_wiki_docs.py

      - name: Checkout Wiki Repository
        run: |
          git config --global user.name 'JARVYS_DEV Auto-Doc'
          git config --global user.email 'github-actions@github.com'
          REPO="${{ github.repository }}"
          git clone \
            https://x-access-token:${GH_TOKEN}@github.com/${REPO}.wiki.git \
            wiki-repo || {
            echo "‚ö†Ô∏è Wiki repository not found, creating..."
            # Le wiki sera cr√©√© automatiquement lors du premier push
            mkdir -p wiki-repo
            cd wiki-repo
            git init
            git remote add origin https://x-access-token:${GH_TOKEN}@github.com/${REPO}.wiki.git
          }

      - name: Update Wiki Pages
        run: |
          # Copier les fichiers g√©n√©r√©s vers le wiki
          if [ -d "docs_generated" ]; then
            cp -r docs_generated/* wiki-repo/ 2>/dev/null || true
          fi

          cd wiki-repo

          # Ajouter les modifications
          git add .

          # V√©rifier s'il y a des changements
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è Aucun changement d√©tect√© dans la documentation"
          else
            git commit -m "üìö Auto-update documentation - $(date '+%Y-%m-%d %H:%M')"
            git push origin main || git push origin master || {
              echo "‚ö†Ô∏è Premi√®re publication du wiki"
              git push --set-upstream origin main
            }
            echo "‚úÖ Documentation mise √† jour avec succ√®s"
          fi

      # Firewall configuration - MUST be placed after all Copilot and environment setup
      - name: üîí Configure Firewall (Post-Setup)
        run: |
          echo "üîí Configuring firewall with essential GitHub/Copilot allow rules..."
          
          # Allow essential GitHub domains for Copilot and Actions
          echo "Adding allow rules for GitHub/Copilot domains..."
          
          # GitHub core domains
          sudo ufw allow out to github.com
          sudo ufw allow out to api.github.com  
          sudo ufw allow out to copilot-proxy.githubusercontent.com
          sudo ufw allow out to uploads.github.com
          sudo ufw allow out to objects.githubusercontent.com
          
          # Essential ports for HTTPS/HTTP
          sudo ufw allow out 443
          sudo ufw allow out 80
          sudo ufw allow out 53  # DNS
          
          echo "‚úÖ Firewall allow rules configured for GitHub/Copilot connectivity"
          echo "‚ö†Ô∏è  Firewall not activated in CI to avoid workflow disruption"
