#!/bin/bash
# Script de d√©marrage JARVYS_AI pour Docker Windows 11

set -e

echo "ü§ñ D√©marrage de JARVYS_AI..."
echo "üìÖ $(date)"
echo "üê≥ Container: $HOSTNAME"

# Configuration des logs
export LOG_LEVEL="${LOG_LEVEL:-INFO}"
export LOG_FILE="${LOG_FILE:-/app/logs/jarvys_ai.log}"

# Cr√©er r√©pertoire de logs si n√©cessaire
mkdir -p /app/logs

# Configuration audio PulseAudio
if [ -n "$PULSE_RUNTIME_PATH" ]; then
    echo "üîä Configuration audio PulseAudio..."
    export PULSE_SERVER="unix:${PULSE_RUNTIME_PATH}/pulse/native"
fi

# V√©rification sant√© syst√®me
echo "üîç V√©rification syst√®me..."

# Test connectivit√© r√©seau
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    echo "‚úÖ Connectivit√© r√©seau OK"
else
    echo "‚ö†Ô∏è Pas de connectivit√© r√©seau"
fi

# Test services audio
if command -v aplay >/dev/null 2>&1; then
    echo "‚úÖ Support audio disponible"
else
    echo "‚ö†Ô∏è Support audio limit√©"
fi

# Variables d'environnement requises
required_vars=("OPENAI_API_KEY")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ö†Ô∏è Variable manquante: $var"
    else
        echo "‚úÖ $var configur√©"
    fi
done

# Mode de d√©marrage
MODE="${1:-production}"
echo "üöÄ Mode: $MODE"

case "$MODE" in
    --mode)
        MODE="$2"
        ;;
    production)
        echo "üè≠ D√©marrage en mode production..."
        exec python -m jarvys_ai.main --config production
        ;;
    development)
        echo "üîß D√©marrage en mode d√©veloppement..."
        exec python -m jarvys_ai.main --config development --debug
        ;;
    demo)
        echo "üé≠ D√©marrage en mode d√©mo..."
        exec python -m jarvys_ai.main --config demo --demo-mode
        ;;
    interactive)
        echo "üí¨ D√©marrage en mode interactif..."
        exec python -m jarvys_ai.main --interactive
        ;;
    test)
        echo "üß™ Ex√©cution des tests..."
        exec python -m pytest tests/ -v
        ;;
    health)
        echo "üè• V√©rification sant√©..."
        exec python -c "
import asyncio
from jarvys_ai.main import JarvysAI

async def health_check():
    jarvys = JarvysAI({'demo_mode': True})
    try:
        await jarvys.start()
        print('‚úÖ JARVYS_AI OK')
        return True
    except Exception as e:
        print(f'‚ùå JARVYS_AI KO: {e}')
        return False
    finally:
        await jarvys.stop()

result = asyncio.run(health_check())
exit(0 if result else 1)
        "
        ;;
    *)
        echo "‚ùå Mode inconnu: $MODE"
        echo "Modes disponibles: production, development, demo, interactive, test, health"
        exit 1
        ;;
esac
